chatnets = {
  google = { type = "IRC"; };
  jabber = { type = "IRC"; };
  freenode = { type = "IRC"; nick = "ben_bernard"; };
};

channels = (
  { name = "#gbow"; chatnet = "google"; autojoin = "yes"; },
  {
    name = "&bitlbee";
    chatnet = "jabber";
    autojoin = "yes";
    autosendcmd = "msg &bitlbee identify iamben;";
  }
);

windows = {
  1 = { immortal = "yes"; name = "(status)"; level = "ALL"; };
  2 = {
    immortal = "yes";
    items = (
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "&bitlbee";
        tag = "jabber";
      }
    );
  };
  3 = {
    immortal = "yes";
    items = (
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "#gbow";
        tag = "google";
      }
    );
  };
  4 = {
    immortal = "yes";
    items = (
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "#ex_bow";
        tag = "freenode";
      }
    );
  };
};

aliases = {
  J = "join";
  WJOIN = "join -window";
  WQUERY = "query -window";
  LEAVE = "part";
  BYE = "quit";
  EXIT = "quit";
  SIGNOFF = "quit";
  DESCRIBE = "action";
  DATE = "time";
  HOST = "userhost";
  LAST = "lastlog";
  SAY = "msg *";
  WI = "whois";
  WII = "whois $0 $0";
  WW = "whowas";
  W = "who";
  N = "url ninja";
  M = "msg";
  T = "topic";
  C = "window close";
  CL = "clear";
  K = "kick";
  KB = "kickban";
  KN = "knockout";
  BANS = "ban";
  B = "ban";
  MUB = "unban *";
  UB = "unban";
  IG = "ignore";
  UNIG = "unignore";
  SB = "scrollback";
  UMODE = "mode $N";
  WC = "window close";
  WN = "window new hide";
  SV = "say Irssi $J ($V) - http://irssi.org/";
  GOTO = "sb goto";
  CHAT = "dcc chat";
  RUN = "SCRIPT LOAD";
  UPTIME = "eval exec - expr `date +%s` - \\$F | awk '{print \"Irssi uptime: \"int(\\\\\\$1/3600/24)\"d \"int(\\\\\\$1/3600%24)\"h \"int(\\\\\\$1/60%60)\"m \"int(\\\\\\$1%60)\"s\" }'";
  CALC = "exec - if which bc &>/dev/null\\; then echo '$*' | bc | awk '{print \"$*=\"$$1}'\\; else echo bc was not found\\; fi";
  SBAR = "STATUSBAR";
  INVITELIST = "mode $C +I";
  Q = "QUERY";
  "MANUAL-WINDOWS" = "set use_status_window off;set autocreate_windows off;set autocreate_query_level none;set autoclose_windows off;set reuse_unused_windows on;save";
  EXEMPTLIST = "mode $C +e";
  ATAG = "WINDOW SERVER";
  close = "window close";
  1 = "window goto 1";
  2 = "window goto 2";
  3 = "window goto 3";
  4 = "window goto 4";
  5 = "window goto 5";
  6 = "window goto 6";
  7 = "window goto 7";
  8 = "window goto 8";
  9 = "window goto 9";
  10 = "window goto 10";
  11 = "window goto 11";
  12 = "window goto 12";
  13 = "window goto 13";
  14 = "window goto 14";
  15 = "window goto 15";
  16 = "window goto 16";
  17 = "window goto 17";
  18 = "window goto 18";
  19 = "window goto 19";
  20 = "window goto 20";
  act = "window goto active";
  a = "window goto active";
  uo = "url open";
  reload_script = "script unload $0 ; script load $0";
  ai = "add_ignore_channel";
  ri = "remove_ignore_channel";
  si = "show_ignore_list";
  opme = "msg ChanServ op #ex_ball_of_wax; msg ChanServ op #ex_bow";
  rc = "script unload confirm; script load confirm";
};

statusbar = {
  # formats:
  # when using {templates}, the template is shown only if it's argument isn't
  # empty unless no argument is given. for example {sb} is printed always,
  # but {sb $T} is printed only if $T isn't empty.

  items = {
    # start/end text in statusbars
    barstart = "{sbstart}";
    barend = "{sbend}";

    topicbarstart = "{topicsbstart}";
    topicbarend = "{topicsbend}";

    # treated "normally", you could change the time/user name to whatever
    time = "{sb $Z}";
    user = "{sb {sbnickmode $cumode}$N{sbmode $usermode}{sbaway $A}}";

    # treated specially .. window is printed with non-empty windows,
    # window_empty is printed with empty windows
    #window = "{sb $winref:$itemname{sbmode $M}}";
    # add server name to window name
    window = "{sb $winref:$tag/$T{sbmode $M}}";
    window_empty = "{sb $winref{sbservertag $tag}}";
    prompt = "{prompt $[.15]itemname}";
    prompt_empty = "{prompt $winname}";
    topic = " $topic";
    topic_empty = " Irssi v$J - http://irssi.org/help/";

    # all of these treated specially, they're only displayed when needed
    lag = "{sb Lag: $0-}";
    act = "{sb Act: $0-}";
    more = "-- more --";
  };

  # there's two type of statusbars. root statusbars are either at the top
  # of the screen or at the bottom of the screen. window statusbars are at
  # the top/bottom of each split window in screen.
  default = {
    # the "default statusbar" to be displayed at the bottom of the window.
    # contains all the normal items.
    window = {
      disabled = "no";

      # window, root
      type = "window";
      # top, bottom
      placement = "bottom";
      # number
      position = "1";
      # active, inactive, always
      visible = "active";

      # list of items in statusbar in the display order
      items = {
        barstart = { priority = "100"; };
        time = { };
        user = { };
        window = { };
        window_empty = { };
        lag = { priority = "-1"; };
        act = { priority = "10"; };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
        chanact = { };
      };
    };

    # statusbar to use in inactive split windows
    window_inact = {
      type = "window";
      placement = "bottom";
      position = "1";
      visible = "inactive";
      items = {
        barstart = { priority = "100"; };
        window = { };
        window_empty = { };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
      };
    };

    # we treat input line as yet another statusbar :) It's possible to
    # add other items before or after the input line item.
    prompt = {
      type = "root";
      placement = "bottom";
      # we want to be at the bottom always
      position = "100";
      visible = "always";
      items = {
        prompt = { priority = "-1"; };
        prompt_empty = { priority = "-1"; };
        # treated specially, this is the real input line.
        input = { priority = "10"; };
      };
    };

    # topicbar
    topic = {
      type = "root";
      placement = "top";
      position = "1";
      visible = "always";
      items = {
        topicbarstart = { priority = "100"; };
        topic = { };
        topic_empty = { };
        topicbarend = { priority = "100"; alignment = "right"; };
      };
    };
  };
};

settings = {
  core = {
    real_name = "Ben Bernard";
    user_name = "bernard";
    nick = "bernard";
  };
  "fe-common/core" = {
    autolog = "yes";
    autolog_path = "~/.irclogs/$tag/$0.log";
    emphasis_multiword = "yes";
    activity_hide_targets = "&bitlbee";
  };
  "fe-text" = { actlist_sort = "recent"; };
  "perl/core" = {
    perl_use_lib = "/home/kamling/install/lib/perl-5.6.0/Linux-2.4c2.3-i686";
  };
  "perl/core/scripts" = {
    url_log_browser = "/home/bernard/bin/openUrl '%f'";
    autoaway_timeout = "0";
    autoaway = "36000";
    away_reason = "idle timeout";
    nicklist_width = "16";
    nicklist_automode = "screen";
    print_log_whole_log = "yes";
    chanact_show_all = "yes";
    nicklist_height = "100";
    confirm_characters = "/:";
    confirm_channels = "twitter_bernard_ben";
    url_log_auto_head = "no";
  };
};

logs = { };
ignores = ( );
