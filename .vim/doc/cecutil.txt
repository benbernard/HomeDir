*cecutil.txt*	DrChip's Utilities				Apr 13, 2005

Author:  Charles E. Campbell, Jr.  <NdrOchip@ScampbellPfamily.AbizM>
	  (remove NOSPAM from Campbell's email first)

==============================================================================
1. Contents					*cecutil* *cecutil-contents*

	1. Contents.................: |cecutil-contents|
	2. Positioning..............: |cecutil-posn|
	3. Marks....................: |cecutil-marks|
	4. History..................: |cecutil-history|

==============================================================================

2. Positioning				*cecutil-posn*	*cecutil-position*

    let winposn= SaveWinPosn()				*cecutil-savewinposn*

	This operation will save window position in winposn variable and
	on a (buffer local) b:winposn{} stack.

    call SaveWinPosn()

	This function will save window position in b:winposn{b:iwinposn}

    let winposn= SaveWinPosn(0)

	This operation will _only_ save the window position in winposn variable.
	Ie. the window position will not appear on the b:winposn{} stack.  You 
	will then need to use RestoreWinPosn(winposn) to restore to this window
	position.

    call RestoreWinPosn()				*cecutil-restorewinposn*

	This function call will use the local buffer b:winposn{} stack to
	restore the last window position saved therein.  It will also
	pop the stack.

    call RestoreWinPosn(winposn)

	This function call will use the winposn variable and restore
	the window position accordingly.  It will also search the
	stack and remove any similar entry from the stack.

			*cecutil-map* *cecutil-cmd* *cecutil-swp* *cecutil-rwp*
    \swp : save current window position (uses the b:winposn{} stack)
    :SWP   like \swp, but provided as a command

    \rwp : restore window position      (uses the b:winposn{} stack)
    :RWP   like \rwp, but provided as a command

==============================================================================

3. Marks						*cecutil-marks*

    call SaveMark(markname)				*cecutil-savemark*
    let savemark= SaveMark(markname)
   
		ex. call SaveMark("a")
		let savemarkb= SaveMark("b")

	This function saves a string in the global variable g:savemark_{markname}
	which contains sufficient information to completely restore the position
	of a mark.  It also returns that string.

   call RestoreMark(markname)				*cecutil-restoremark*
   call RestoreMark(savemark)

	This function either takes a single-character string (ex. "a") and uses
	g:savemark_{markname} to restore the mark position or assumes that
	the string passed to it is a SaveMark() string (and uses it to restore
	the mark).

   call DestroyMark(markname)				*cecutil-destroymark*

	The DestroyMark() function completely removes a mark.  It does this
	by saving the window position, copying line one, putting the
	to-be-destroyed mark on that new line, deleting the new line, and
	then restoring the window position.  The windows' modified status
	is preserved.

==============================================================================

4. History						*cecutil-history*

	v7 Mar 10, 2005 : * removed zO from saved window position; caused
	                    problems with ftplugin/currfunc.vim
			  * doing a SWP and RWP on an empty buffer produced
			    "empty buffer" messages; now these are ignored
	   Apr 13, 2005   * command (SWP RWP MP SP etc) now have -bar so
	                    that the "|" can be used to chain such commands
	v6 Feb 17, 2005 : * improved SaveMark() and RestoreMark()
	v5 Jan 18, 2005 : * s:loaded_winposn changed to g:loaded_cecutil
	v4 Oct 25, 2004 : * changed com! to com so that error messages will
			    be given when there's a command-name conflict
	v3 May 19, 2004 : * bugfix: the sequence \swp\rwp wasn't working right
			  * bugfix: \swp...\rwp was echoing the current
			    line when the \rwp should've been silent
			  * improved Dfunc/Decho/Dret debugging


==============================================================================
vim:tw=78:ts=8:ft=help
