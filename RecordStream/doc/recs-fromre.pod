=head1 NAME

recs-fromre

=head1 recs-fromre --help-all

 Usage: recs-fromre <args> <re> [<files>]
    <re> is matched against each line of input (or lines of <files>).  Each
    successfully match results in one output record whose field values are the
    capture groups from the match.  Lines that do not match are ignored.  Keys
    are named numerically (0, 1, etc.) or as given by --key.
 
    For spliting on a delimeter, see recs-fromsplit.
 
 Arguments:
    --key|-k <key>   Comma separated list of key names.  May be specified multiple times.
                     may be a key spec, see 'man recs' for more
 
 Examples:
    Parse greetings
       recs-fromre --key name,age '^Hello, my name is (.*) and I am (\d*) years? old$'
    Parse a single key named time from a group of digits at the beginning of the line
       recs-fromre --key time '^(\d+)'
    Map three sets of <>s to a record with keys named 0, 1, and 2
       recs-fromre '<(.*)>\s*<(.*)>\s*<(.*)>'
 
 Help Options:
    --help-all       Output all help for this script
    --help           This help screen
    --help-keyspecs  Help on keyspecs, a way to index deeply and with regexes
 
 KEY SPECS   
    A key spec is short way of specifying a field with prefixes or regular
    expressions, it may also be nested into hashes and arrays.  Use a '/' to nest
    into a hash and a '#NUM' to index into an array (i.e. #2)
    
    An example is in order, take a record like this:
    
      {"biz":["a","b","c"],"foo":{"bar 1":1},"zap":"blah1"}
      {"biz":["a","b","c"],"foo":{"bar 1":2},"zap":"blah2"}
      {"biz":["a","b","c"],"foo":{"bar 1":3},"zap":"blah3"}
    
    In this case a key spec of 'foo/bar 1' would have the values 1,2, and 3
    in the respective records.
    
    Similarly, 'biz/#0' would have the value of 'a' for all 3 records
    
    You can also prefix key specs with '@' to engage the fuzzy matching logic
    
    Fuzzy matching works like this in order, first key to match wins
      1. Exact match ( eq )
      2. Prefix match ( m/^/ )
      3. Match anywehre in the key (m//)
    
    So, in the above example '@b/#2', the 'b' portion would expand to 'biz' and 2
    would be the index into the array, so all records would have the value of 'c'
    
    Simiarly, @f/b would have values 1, 2, and 3
 
    You can escape / with a \.  For example, if you have a record:
    {"foo/bar":2}
 
    You can address that key with foo\/bar
 

=head1 See Also

=over

=item  L<RecordStream(3)> - Overview of the scripts and the system

=item  L<recs-examples(3)> - A set of simple recs examples

=item  L<recs-story(3)> - A humorous introduction to RecordStream

=item SCRIPT --help - every script has a --help option, like the output above

=back

