=head1 NAME

recs-tognuplot

=head1 recs-tognuplot --help-all

 Usage: recs-tognuplot <args> [<files>]
    Create a graph of points from a record stream using GNU Plot. Defaults to
    creatinga scatterplot of points, can also create a bar or line graph
 
    For the --using and --plot arguments, you may want to reference a GNU Plot
    tutorial, though it can get quite complex, here is one example:
 
    http://www.gnuplot.info/docs/node100.html
 
 Arguments:
    --key|-k <keys>                May be specified multiple times, may be
                                   comma separated.  These are the keys to graph.  If you
                                   have more than 2 keys, you must specify a --using
                                   statement or use --bargraph or --lines
                                   May be a keyspec or keygroup, see
                                   '--help-keys' for more information
    --using <using spec>           A 'using' string passed directly to gnuplot,
                                   you can use keys specified with --key in the order
                                   specified.  For instance --key count,date,avg with
                                   --using '3:2' would plot avg vs. date.  May be
                                   specified multiple times
    --plot <plot spec>             May be specified multiple times, may be comma separated.
                                   A directive passed directly to plot,
                                   e.g. --plot '5 title "threshold"'
    --precommand <gnuplot spec>    May be specified multiple times, may be comma separated.
                                   A command executed by gnuplot before executing plot,
                                   e.g. --precommand 'set xlabel "foo"'
    --title <title>                Specify a title for the entire graph
    --label <label>                Labels each --using line with the indicated label
    --file <filename>              Name of output png file.  Will append .png if not
                                   present Defaults to tognuplot.png
    --lines                        Draw lines between points, may specify more
                                   than 2 key, each field is a line
    --bargraph                     Draw a bar graph, each field is a bar, may specify
                                   than 2 key, each field is a bar
    --gnuplot-command              Location of gnuplot binary if not on path
 
    Graph the count field
       recs-tognuplot --field count
    Graph count vs. date with a threshold line
       recs-tognuplot --field count,date --plot "5 title 'threshold'"
    Graph a complicated expression, with a label
       recs-tognuplot --field count,date,adjust --using '($1-$3):2' --label "counts"
    Graph count vs. date, with a title
       recs-tognuplot --field count,date --title 'counts over time'
    Graph count1, count2, count3 as 3 different bars in a bar graph
       recs-tognuplot --field count1,count2,count3
 
 Help Options:
    --help-all        Output all help for this script
    --help            This help screen
    --help-keygroups  Help on keygroups, a way of specifying multiple keys
    --help-keys       Help on keygroups and keyspecs
    --help-keyspecs   Help on keyspecs, a way to index deeply and with regexes
 
 KEY GROUPS
    SYNTAX: !regex!opt1!opt2...
    Key groups are a way of specifying multiple fields to a recs command with a
    single argument or function.  They are generally regexes, and have several
    options to control what fields they match.  By default you give a regex, and
    it will be matched against all first level keys of a record to come up with
    the record list.  For instance, in a record like this:
 
    { 'zip': 1, 'zap': 2, 'foo': { 'bar': 3 } }
 
    Key group: !z! would get the keys 'zip' and 'zap'
 
    You can have a literal '!' in your regex, just escape it with a \.
 
    Normally, key groups will only match keys whose values are scalars.  This
    can be changed with the 'returnrefs' or rr flag.
 
    With the above record !f! would match no fields, but !f!rr would match foo
    (which has a value of a hash ref)
 
    Options on KeyGroups:
       returnrefs, rr  - Return keys that have reference values (default:off)
       full, f         - Regex should match against full keys (recurse fully)
       depth=NUM,d=NUM - Only match keys at NUM depth (regex will match against
                         full keyspec)
       sort, s         - sort keyspecs lexically
 
 KEY SPECS   
    A key spec is short way of specifying a field with prefixes or regular
    expressions, it may also be nested into hashes and arrays.  Use a '/' to nest
    into a hash and a '#NUM' to index into an array (i.e. #2)
    
    An example is in order, take a record like this:
    
      {"biz":["a","b","c"],"foo":{"bar 1":1},"zap":"blah1"}
      {"biz":["a","b","c"],"foo":{"bar 1":2},"zap":"blah2"}
      {"biz":["a","b","c"],"foo":{"bar 1":3},"zap":"blah3"}
    
    In this case a key spec of 'foo/bar 1' would have the values 1,2, and 3
    in the respective records.
    
    Similarly, 'biz/#0' would have the value of 'a' for all 3 records
    
    You can also prefix key specs with '@' to engage the fuzzy matching logic
    
    Fuzzy matching works like this in order, first key to match wins
      1. Exact match ( eq )
      2. Prefix match ( m/^/ )
      3. Match anywehre in the key (m//)
    
    So, in the above example '@b/#2', the 'b' portion would expand to 'biz' and 2
    would be the index into the array, so all records would have the value of 'c'
    
    Simiarly, @f/b would have values 1, 2, and 3
 
    You can escape / with a \.  For example, if you have a record:
    {"foo/bar":2}
 
    You can address that key with foo\/bar
 

=head1 See Also

=over

=item  L<RecordStream(3)> - Overview of the scripts and the system

=item  L<recs-examples(3)> - A set of simple recs examples

=item  L<recs-story(3)> - A humorous introduction to RecordStream

=item SCRIPT --help - every script has a --help option, like the output above

=back

