=head1 NAME

recs-sort

=head1 recs-sort --help-all

 Usage: recs-sort <args> [<files>]
    Sorts records from input or from <files>.  You may sort on a list of keys,
    each key sorted lexically (alpha order) or numerically
 
    --key <keyspec> - May be comma separated, May be specified multiple times.
                      Each keyspec is a name or a name=sortType.  The name
                      should be a field name to sort on.  The sort type should
                      be either lexical or numeric.  Default sort type is
                      lexical (can also use nat, lex, n, and l).  Additionallly,
                      the sort type may be prefixed with '-' to indicate a
                      decreasing sort order.  Additionally, the sort type may be
                      postfixed with "*" to sort the special value "ALL" to the
                      end (useful for the output of recs-collate --cube).  See
                      perldoc for App::RecordStream::Record for more on sort
                      specs.  May be a key spec, see '--help-keyspecs' for more.
                      Cannot be a keygroup.
     --reverse      - Reverses the sort order
 
 Examples:
    Sort on the id field, a numeric
       recs-sort --key id=numeric
    Sort on age, then name
       recs-sort --key age=numeric,name
    Sort on decreasing size, name
       recs-sort --key size=-numeric --key name
 
 Help Options:
    --help-all       Output all help for this script
    --help           This help screen
    --help-keyspecs  Help on keyspecs, a way to index deeply and with regexes
 
 KEY SPECS   
    A key spec is short way of specifying a field with prefixes or regular
    expressions, it may also be nested into hashes and arrays.  Use a '/' to nest
    into a hash and a '#NUM' to index into an array (i.e. #2)
    
    An example is in order, take a record like this:
    
      {"biz":["a","b","c"],"foo":{"bar 1":1},"zap":"blah1"}
      {"biz":["a","b","c"],"foo":{"bar 1":2},"zap":"blah2"}
      {"biz":["a","b","c"],"foo":{"bar 1":3},"zap":"blah3"}
    
    In this case a key spec of 'foo/bar 1' would have the values 1,2, and 3
    in the respective records.
    
    Similarly, 'biz/#0' would have the value of 'a' for all 3 records
    
    You can also prefix key specs with '@' to engage the fuzzy matching logic
    
    Fuzzy matching works like this in order, first key to match wins
      1. Exact match ( eq )
      2. Prefix match ( m/^/ )
      3. Match anywehre in the key (m//)
    
    So, in the above example '@b/#2', the 'b' portion would expand to 'biz' and 2
    would be the index into the array, so all records would have the value of 'c'
    
    Simiarly, @f/b would have values 1, 2, and 3
 
    You can escape / with a \.  For example, if you have a record:
    {"foo/bar":2}
 
    You can address that key with foo\/bar
 

=head1 See Also

=over

=item  L<RecordStream(3)> - Overview of the scripts and the system

=item  L<recs-examples(3)> - A set of simple recs examples

=item  L<recs-story(3)> - A humorous introduction to RecordStream

=item SCRIPT --help - every script has a --help option, like the output above

=back

