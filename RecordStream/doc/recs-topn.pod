=head1 NAME

recs-topn

=head1 recs-topn --help-all

 Usage: recs-topn <args> [<files>]
    Outputs the top n records from input stream or from <files>.  You may
    segment the input stream based on a list of keys such that unique values
    of keys are treated as distinct input streams.  This enables
    top n listings per value groupings.  The key values need not be contiguous
    in the input record stream.
 
    --key <keyspec>       - Comma separated list of fields.  May be specified multiple times.
                            May be a keyspec or keygroup, see '--help-keys' for more
    --topn | -n <number>  - Number of records to output.  Default is 10.
    --delimiter <string>  - String used internally to delimit values when performing a topn
                            on a keyspec that inlcudeds multiple keys.  This value defaults
                            to "9t%7Oz%]" which may - under unusual and bizarre corner
                            cases - cause false positive key matches if your values contain
                            this value.  You can set this to any string.
 
 Examples:
    Output just the top 5 records
       cat records | recs-topn -n=5
     (this is equivalent to executing "cat records | recs-grep '$line < 5'")
 
    Output just 10 records for each area
       cat records | recs-sort --key area | recs-topn -n=10 --key area
 
    Output the top 10 longest running queries per area and priority level
       cat records | recs-sort --key area,priority,runtime=-n  | recs-topn -n=10 --key area,priority
 
 Help Options:
    --help-all        Output all help for this script
    --help            This help screen
    --help-keygroups  Help on keygroups, a way of specifying multiple keys
    --help-keys       Help on keygroups and keyspecs
    --help-keyspecs   Help on keyspecs, a way to index deeply and with regexes
 
 KEY GROUPS
    SYNTAX: !regex!opt1!opt2...
    Key groups are a way of specifying multiple fields to a recs command with a
    single argument or function.  They are generally regexes, and have several
    options to control what fields they match.  By default you give a regex, and
    it will be matched against all first level keys of a record to come up with
    the record list.  For instance, in a record like this:
 
    { 'zip': 1, 'zap': 2, 'foo': { 'bar': 3 } }
 
    Key group: !z! would get the keys 'zip' and 'zap'
 
    You can have a literal '!' in your regex, just escape it with a \.
 
    Normally, key groups will only match keys whose values are scalars.  This
    can be changed with the 'returnrefs' or rr flag.
 
    With the above record !f! would match no fields, but !f!rr would match foo
    (which has a value of a hash ref)
 
    Options on KeyGroups:
       returnrefs, rr  - Return keys that have reference values (default:off)
       full, f         - Regex should match against full keys (recurse fully)
       depth=NUM,d=NUM - Only match keys at NUM depth (regex will match against
                         full keyspec)
       sort, s         - sort keyspecs lexically
 
 KEY SPECS   
    A key spec is short way of specifying a field with prefixes or regular
    expressions, it may also be nested into hashes and arrays.  Use a '/' to nest
    into a hash and a '#NUM' to index into an array (i.e. #2)
    
    An example is in order, take a record like this:
    
      {"biz":["a","b","c"],"foo":{"bar 1":1},"zap":"blah1"}
      {"biz":["a","b","c"],"foo":{"bar 1":2},"zap":"blah2"}
      {"biz":["a","b","c"],"foo":{"bar 1":3},"zap":"blah3"}
    
    In this case a key spec of 'foo/bar 1' would have the values 1,2, and 3
    in the respective records.
    
    Similarly, 'biz/#0' would have the value of 'a' for all 3 records
    
    You can also prefix key specs with '@' to engage the fuzzy matching logic
    
    Fuzzy matching works like this in order, first key to match wins
      1. Exact match ( eq )
      2. Prefix match ( m/^/ )
      3. Match anywehre in the key (m//)
    
    So, in the above example '@b/#2', the 'b' portion would expand to 'biz' and 2
    would be the index into the array, so all records would have the value of 'c'
    
    Simiarly, @f/b would have values 1, 2, and 3
 
    You can escape / with a \.  For example, if you have a record:
    {"foo/bar":2}
 
    You can address that key with foo\/bar
 

=head1 See Also

=over

=item  L<RecordStream(3)> - Overview of the scripts and the system

=item  L<recs-examples(3)> - A set of simple recs examples

=item  L<recs-story(3)> - A humorous introduction to RecordStream

=item SCRIPT --help - every script has a --help option, like the output above

=back

