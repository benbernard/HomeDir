#!/usr/bin/perl

# Copyright (C) 2010   Keith Amling, keith.amling@gmail.com
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

$| = 1;

use strict;
use warnings;

use FindBin;
use lib "$FindBin::RealBin/../libs";

use Amling::Git::GRD::Exec::Context;
use Amling::Git::GRD::Operation;
use Amling::Git::GRD::Parser;
use Amling::Git::GRD::Utils;
use Amling::Git::Utils;
use Getopt::Long;

# TODO: no die's!  need to all call common bail() infrastructure so we can reset cleanly, maybe even need to allow expectation to be passed into bail() and bail can give user option to cleanup to meet it and continue...
# TODO: several failures (e.g.  any convert_commitlike, any actual commit (think of empty change!)) could probably stand for more graceful handling
# TODO: correctness in the face of GC?  you'd have to run GRD longer than the cleanup period which is pretty big
# TODO: audit messages before each shell invocation indicating expected state and obvious options
# TODO: help on operations
# TODO: help on commands
# TODO: verbosity levels(?)
# TODO: dry run?
# TODO: make empty commits work damn it (skip them or something)

my $onto_option;
my $skip_edit;

my @options =
(
    "onto=s" => \$onto_option,
    "skip-edit|q" => \$skip_edit,
    "help"   => sub { usage(0); },
);

GetOptions(@options) || usage(1);

# needed since we use "<>" for STDIN very soon
my @specs = @ARGV;
@ARGV = ();

if(defined($onto_option))
{
    $onto_option = Amling::Git::Utils::convert_commitlike($onto_option);
}

my @scripts;
my $onto_final;
for my $spec (@specs)
{
    my ($ok, $base, $lines) = Amling::Git::GRD::Operation::parse($spec);
    if(!$ok)
    {
        die "Could not parse operation $spec";
    }
    if(defined($onto_option))
    {
        $base = $onto_option;
    }
    if(!defined($base))
    {
        die "Spec $spec did not produce a target and --onto not specified";
    }
    if(!defined($onto_final))
    {
        $onto_final = $base;
    }
    else
    {
        if($onto_final ne $base)
        {
            die "Multiple targets specified: $onto_final, $base";
        }
    }
    push @scripts, [$spec, $lines];
}
if(!defined($onto_final))
{
    print "No specs given?\n";
    usage(1);
}

Amling::Git::GRD::Utils::run_shell(0, 0, 0);

my $lines = [];
if(@scripts == 1)
{
    push @$lines, @{$scripts[0]->[1]};
}
else
{
    for my $script (@scripts)
    {
        push @$lines, "" if(@$lines);
        push @$lines, "# " . $script->[0];
        push @$lines, "push";
        push @$lines, map { "   $_" } @{$script->[1]};
        push @$lines, "pop";
    }
}

my @commands = @{Amling::Git::GRD::Parser::edit_loop($lines, $skip_edit)};
unless(@commands)
{
    print "Nothing to do.\n";
    exit 0;
}

my $ctx = Amling::Git::GRD::Exec::Context->new();

Amling::Git::GRD::Utils::run("git", "checkout", $onto_final) || die "Cannot checkout $onto_final";

my $ct = scalar(@commands);
my $n = 1;
for my $command (@commands)
{
    print "Interpretting ($n/$ct): " . $command->str() . "\n";
    ++$n;

    $command->execute($ctx);
}

{
    my $branches = $ctx->get('branches', {});
    for my $branch (sort(keys(%$branches)))
    {
        # TODO: backup option...
        print "Updating: $branch => " . $branches->{$branch} . "\n";
        # TODO: better reason
        Amling::Git::GRD::Utils::run("git", "update-ref", "-m", "GRD", "refs/heads/$branch", $branches->{$branch}) || die "Cannot update $branch";
    }
}

{
    my $head = $ctx->get('head');
    if(defined($head))
    {
        my ($type, $v1) = @$head;

        if($type == 0)
        {
            print "Leaving detached head at $v1.\n";
            Amling::Git::GRD::Utils::run("git", "checkout", $v1) || die "Cannot checkout $v1";
        }
        elsif($type == 1)
        {
            print "Leaving head at branch $v1.\n";
            Amling::Git::GRD::Utils::run("git", "checkout", $v1) || die "Cannot checkout $v1";
        }
        else
        {
            die "Unknown head type: $type";
        }
    }
    else
    {
        # TODO: maybe reset to starting point?
        print "No head set?  Leaving wherever.\n";
    }
}

print "Done.\n";
my $grd_level = $ENV{'GRD_LEVEL'};
if($grd_level)
{
    print "Still inside GRD!\n";
    print "GRD level: " . $grd_level . "\n";
}

sub usage
{
    my $ec = shift;

    print <<EOF;
Usage: $0 <options> <operations>
   --onto <commitlike>                Use this as the destination to rebase onto.
   --help                             Print this help.
EOF

    exit $ec;
}
